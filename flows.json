[
    {
        "id": "5f562f66.a301e",
        "type": "tab",
        "label": "device-message-adapter",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "21ff842d.62f36c",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyS0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "28",
        "bin": "bin",
        "out": "count",
        "addchar": true,
        "responsetimeout": "10000"
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker 1",
        "broker": "$(MQTTSERVERIP1)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "3c926364.cde8dc",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker 2",
        "broker": "$(MQTTSERVERIP2)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "ea743ee6.d8b55",
        "type": "serial in",
        "z": "5f562f66.a301e",
        "name": "Teensy",
        "serial": "21ff842d.62f36c",
        "x": 70,
        "y": 360,
        "wires": [
            [
                "d5761f6c.c46e6"
            ]
        ]
    },
    {
        "id": "93049b70.2dc5c8",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings 1",
        "topic": "$(MQTTPUBLISHTOPIC)",
        "qos": "0",
        "retain": "false",
        "broker": "79250bf3.365cc4",
        "x": 1150,
        "y": 360,
        "wires": []
    },
    {
        "id": "3f988ea4.7ee392",
        "type": "serial out",
        "z": "5f562f66.a301e",
        "name": "Teensy",
        "serial": "21ff842d.62f36c",
        "x": 1160,
        "y": 200,
        "wires": []
    },
    {
        "id": "8cda9011.eab33",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Settings 1",
        "topic": "$(MQTTSUBSCRIBETOPIC)",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "dc36009e.fdeeb"
            ]
        ]
    },
    {
        "id": "dc36009e.fdeeb",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 40,
        "wires": [
            [
                "f3f3f15.081c31",
                "597adbcc.22de84"
            ]
        ]
    },
    {
        "id": "5902d0c0.241a6",
        "type": "file",
        "z": "5f562f66.a301e",
        "name": "Write initSettings.json",
        "filename": "initSettings.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f3f3f15.081c31",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "createSettings",
        "func": "function getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\nvar echoReadings = 0;\nvar device = null;\n\nif (msg.topic == 'echoReadings')\n{\n    echoReadings = 1;\n    device = flow.get('device');\n    \n}\nelse\n{\n    echoReadings = 0;\n    device = msg.payload;\n    for (var ii = 0; ii < msg.payload.settings.length; ++ii)\n    {\n        if (msg.payload.settings[ii].type == 'scalar')\n        {\n            msg.payload.settings[ii].alarm.value = 0;\n            if (!isNaN(msg.payload.settings[ii].value))\n            {\n                if (msg.payload.settings[ii].value < msg.payload.settings[ii].alarm.limits.low)  msg.payload.settings[ii].alarm.value = 1;\n                if (msg.payload.settings[ii].value < msg.payload.settings[ii].alarm.limits.lolo) msg.payload.settings[ii].alarm.value = 3;\n                if (msg.payload.settings[ii].value > msg.payload.settings[ii].alarm.limits.high) msg.payload.settings[ii].alarm.value = 2;\n                if (msg.payload.settings[ii].value > msg.payload.settings[ii].alarm.limits.hihi) msg.payload.settings[ii].alarm.value = 4;\n            }\n        }\n    }\n\n    flow.set('device', msg.payload);    \n}\n\nvar buffer = new ArrayBuffer(28);\nvar settingsView = new DataView(buffer);\nsettingsView.setInt32(0,echoReadings, true);\nsettingsView.setFloat32(4, getAttrObject(device, 'settings', 'numSamples').value, true);\nsettingsView.setFloat32(8, getAttrObject(device, 'settings', 'rawIOffset').value, true);\nsettingsView.setFloat32(12,getAttrObject(device, 'settings', 'rawQOffset').value, true);\nsettingsView.setFloat32(16,getAttrObject(device, 'settings', 'gainDif').value, true);\nsettingsView.setFloat32(20,getAttrObject(device, 'settings', 'mA_to_ADC').value, true);\nsettingsView.setFloat32(24,getAttrObject(device, 'settings', 'DAC_to_mA').value, true);\n\nreturn {topic:'settings',payload:Buffer.from(buffer)};",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 200,
        "wires": [
            [
                "3f988ea4.7ee392"
            ]
        ]
    },
    {
        "id": "302aa037.053d1",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "echoReadings",
        "payload": "1",
        "payloadType": "num",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "f3f3f15.081c31"
            ]
        ]
    },
    {
        "id": "6eaa13e9.4147bc",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "initSettings",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "163af492.5e952b"
            ]
        ]
    },
    {
        "id": "163af492.5e952b",
        "type": "file in",
        "z": "5f562f66.a301e",
        "name": "Read initSettings.json",
        "filename": "initSettings.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "53c95857.5f3d68"
            ]
        ]
    },
    {
        "id": "53c95857.5f3d68",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 280,
        "wires": [
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Save initSettings in Memory",
        "func": "flow.set('device', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 280,
        "wires": [
            [
                "f3f3f15.081c31",
                "f787f6a4.872f68"
            ]
        ]
    },
    {
        "id": "d5761f6c.c46e6",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Parse Reading Byte Array",
        "func": "function getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\nvar ib;\n\nvar device = flow.get('device');\nvar rawIAttr        = getAttrObject(device, 'readings', 'rawI');\nvar rawQAttr        = getAttrObject(device, 'readings', 'rawQ');\nvar procIAttr       = getAttrObject(device, 'readings', 'procI');\nvar procQAttr       = getAttrObject(device, 'readings', 'procQ');\nvar beamCurrentAttr = getAttrObject(device, 'readings', 'beamCurrent');\nvar DACCountAttr    = getAttrObject(device, 'readings', 'DACCount');\nvar DACVoltsAttr    = getAttrObject(device, 'readings', 'DACVolts');\nvar linkQualityAttr = getAttrObject(device, 'readings', 'linkQuality');\nvar signalLevelAttr = getAttrObject(device, 'readings', 'signalLevel');\n\nvar rawI        = new DataView(new ArrayBuffer(4));\nvar rawQ        = new DataView(new ArrayBuffer(4));\nvar procI       = new DataView(new ArrayBuffer(4));\nvar procQ       = new DataView(new ArrayBuffer(4));\nvar beamCurrent = new DataView(new ArrayBuffer(4));\nvar DACCount    = new DataView(new ArrayBuffer(4));\nvar DACVolts    = new DataView(new ArrayBuffer(4));\n\nfor (ib = 0; ib < 4; ++ib)         rawI.setUint8(ib, msg.payload[0 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)         rawQ.setUint8(ib, msg.payload[1 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)        procI.setUint8(ib, msg.payload[2 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)        procQ.setUint8(ib, msg.payload[3 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)  beamCurrent.setUint8(ib, msg.payload[4 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)     DACCount.setUint8(ib, msg.payload[5 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)     DACVolts.setUint8(ib, msg.payload[6 * 4 + 3 - ib]);\n\n\nrawIAttr.value        = Math.round(10.0   * rawI.getFloat32(0)       ) / 10.0;\nrawQAttr.value        = Math.round(10.0   * rawQ.getFloat32(0)       ) / 10.0;\nprocIAttr.value       = Math.round(10.0   * procI.getFloat32(0)      ) / 10.0;\nprocQAttr.value       = Math.round(10.0   * procQ.getFloat32(0)      ) / 10.0;\nbeamCurrentAttr.value = Math.round(100.0  * beamCurrent.getFloat32(0)) / 100.0;\nDACCountAttr.value    = Math.round(10.0   * DACCount.getFloat32(0)   ) / 10.0;\nDACVoltsAttr.value    = Math.round(1000.0 * DACVolts.getFloat32(0)   ) / 1000.0;\nlinkQualityAttr.value = flow.get('linkQuality');\nsignalLevelAttr.value = flow.get('signalLevel');\n\nreturn {topic : 'reading', payload : device};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 360,
        "wires": [
            [
                "1708a017.5cabb"
            ]
        ]
    },
    {
        "id": "cd04ce51.35497",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Check Reading Alarms",
        "func": "for (var ii = 0; ii < msg.payload.readings.length; ++ii)\n{\n    if (msg.payload.readings[ii].type == 'scalar')\n    {\n        msg.payload.readings[ii].alarm.value = 0;\n        if (!isNaN(msg.payload.readings[ii].value))\n        {\n            if (msg.payload.readings[ii].value < msg.payload.readings[ii].alarm.limits.low)  msg.payload.readings[ii].alarm.value = 1;\n            if (msg.payload.readings[ii].value < msg.payload.readings[ii].alarm.limits.lolo) msg.payload.readings[ii].alarm.value = 3;\n            if (msg.payload.readings[ii].value > msg.payload.readings[ii].alarm.limits.high) msg.payload.readings[ii].alarm.value = 2;\n            if (msg.payload.readings[ii].value > msg.payload.readings[ii].alarm.limits.hihi) msg.payload.readings[ii].alarm.value = 4;\n        }\n    }\n}\nflow.set('device', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 360,
        "wires": [
            [
                "27bc7e27.b76a22",
                "93049b70.2dc5c8"
            ]
        ]
    },
    {
        "id": "f69c600b.9542",
        "type": "exec",
        "z": "5f562f66.a301e",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 280,
        "y": 440,
        "wires": [
            [
                "afd71a05.ebd4e8"
            ],
            [],
            []
        ]
    },
    {
        "id": "5b86fa96.034764",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 440,
        "wires": [
            [
                "f69c600b.9542"
            ]
        ]
    },
    {
        "id": "afd71a05.ebd4e8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkStopIndex   = info.indexOf('/70');\nvar levelStopIndex   = info.lastIndexOf('dBm');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStopIndex));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStopIndex - 1));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nflow.set('linkQuality',linkQuality);\nflow.set('signalLevel', signalLevel);\nflow.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "1708a017.5cabb",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Calculate lifetime",
        "func": "var device = msg.payload;\nvar numHistorySamples = 60;\nvar fillingMachine = false;\nvar beamCurrentNow = \n{\n    beamCurrent      :   getAttrObject(device, 'readings', 'beamCurrent').value,\n    time             :   new Date().getTime()\n};\nvar lifetimeAttr = getAttrObject(device, 'readings', 'lifetime');\nvar currentRateAttr = getAttrObject(device, 'readings', 'currentRate');\ncurrentRateAttr.value = 0.0;\nvar lifeTimeDeltaT = getAttrObject(device, 'settings', 'lifeTimeDeltaT').value;\nvar minCurrent = getAttrObject(device, 'settings', 'minCurrent').value;\nlifetimeAttr.value = 100.0;\nvar beamCurrentHistory = context.get('beamCurrentHistory');\nif (beamCurrentHistory == undefined)\n{\n    beamCurrentHistory = [];\n    for (ii = 0; ii < numHistorySamples; ++ii)\n    {\n        beamCurrentHistory[ii] = \n        {\n            beamCurrent :   beamCurrentNow.beamCurrent,\n            time        :   beamCurrentNow.time\n        };\n    }\n    context.set('beamCurrentHistory', beamCurrentHistory);\n    context.set('dbdtLTAverage',0.0) ;\n    context.set('dbdtAverage',0.0) ;\n    return msg;\n}\nbeamCurrentHistory.unshift(beamCurrentNow);\nbeamCurrentHistory.pop();\ncontext.set('beamCurrentHistory', beamCurrentHistory);\nvar dbdtLTAverage = context.get('dbdtLTAverage');\nvar dbdtAverage = context.get('dbdtAverage');\nvar dbdtNow = beamCurrentHistory[0].beamCurrent - beamCurrentHistory[beamCurrentHistory.length - 1].beamCurrent;\nif ((dbdtNow > 0.0) || (beamCurrentHistory[0].beamCurrent < minCurrent) || (-dbdtNow > minCurrent) )\n{\n    dbdtLTAverage = 0.0;\n    context.set('dbdtLTAverage', 0.0);\n    fillingMachine = true;\n}\ndbdtNow = dbdtNow / (beamCurrentHistory[0].time - beamCurrentHistory[beamCurrentHistory.length - 1].time);\ndbdtNow = dbdtNow * 3600.0 * 1000.0;\nif (!fillingMachine)\n{\n    if (-dbdtLTAverage < 0.01) dbdtLTAverage = dbdtNow;\n    dbdtLTAverage = dbdtLTAverage + (dbdtNow - dbdtLTAverage) / lifeTimeDeltaT;\n    context.set('dbdtLTAverage', dbdtLTAverage);\n    \n    var lifetime = -beamCurrentHistory[0].beamCurrent / (dbdtLTAverage + 1e-9);\n    lifetime = Math.round(100.0 * lifetime) / 100.0;\n    if (lifetime < 0.1 ) lifetime = 0.1;\n    if (lifetime > 100.0 ) lifetime = 100.0;\n     \n    lifetimeAttr.value = lifetime;\n}\ndbdtAverage = dbdtAverage + (dbdtNow - dbdtAverage) / 1.0; //lifeTimeDeltaT;\ncontext.set('dbdtAverage', dbdtAverage);\nvar dbdtAverageMin = Math.round(1000.0 * dbdtAverage / 60.0) / 1000.0;\ncurrentRateAttr.value = dbdtAverageMin;\n//node.warn(dbdtAverageMin);\n\nreturn msg;\n\nfunction getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "c07905e4.e24cc8"
            ]
        ]
    },
    {
        "id": "597adbcc.22de84",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Pretty JSON",
        "func": "var jsonPretty = JSON.stringify(msg.payload,null,2); \nreturn {topic:'prettyJson', payload:jsonPretty};",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 40,
        "wires": [
            [
                "5902d0c0.241a6"
            ]
        ]
    },
    {
        "id": "f787f6a4.872f68",
        "type": "debug",
        "z": "5f562f66.a301e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1050,
        "y": 280,
        "wires": []
    },
    {
        "id": "c07905e4.e24cc8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Calc Beam Current Sum",
        "func": "if (msg.topic == 'reset')\n{\n    beamCurrentSum = \n    {\n        sum : 0.0,\n        time: new Date().getTime()\n    };\n    context.set('beamCurrentSum',beamCurrentSum);\n    return null;\n}\nvar numSecsPerDay = 86400;\nvar device = msg.payload;\nbeamCurrent = getAttrObject(device, 'readings', 'beamCurrent').value;\nvar minCurrent = getAttrObject(device, 'settings', 'minCurrent').value;\n\nif (beamCurrent < minCurrent) beamCurrent = 0.0;\nnow = new Date().getTime();\n\nvar beamCurrentSum = context.get('beamCurrentSum');\nif (beamCurrentSum == undefined)\n{\n    beamCurrentSum = \n    {\n        sum : 0.0,\n        time: now\n    };\n}\nbeamCurrentSum.sum = beamCurrentSum.sum + beamCurrent * (now - beamCurrentSum.time) / 1000.0;\nbeamCurrentSum.time = now;\ncontext.set('beamCurrentSum',beamCurrentSum);\navgDayCurrentAttr = getAttrObject(device, 'readings', 'avgDayCurrent');\navgDayCurrentAttr.value = Math.round(1000.0 * beamCurrentSum.sum / numSecsPerDay) / 1000.0; \nreturn msg;\n\nfunction getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 360,
        "wires": [
            [
                "cd04ce51.35497"
            ]
        ]
    },
    {
        "id": "48e2619f.343b9",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "Reset at 8 am",
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 480,
        "y": 400,
        "wires": [
            [
                "c07905e4.e24cc8"
            ]
        ]
    },
    {
        "id": "27bc7e27.b76a22",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings 2",
        "topic": "$(MQTTPUBLISHTOPIC)",
        "qos": "0",
        "retain": "false",
        "broker": "3c926364.cde8dc",
        "x": 1150,
        "y": 440,
        "wires": []
    },
    {
        "id": "6afc5d88.a477e4",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Settings 2",
        "topic": "$(MQTTSUBSCRIBETOPIC)",
        "qos": "0",
        "datatype": "auto",
        "broker": "3c926364.cde8dc",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "dc36009e.fdeeb"
            ]
        ]
    }
]